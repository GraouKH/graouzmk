/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers
#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LOWER>, <&to LOWER>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

	// # ` HASH GRAVE
        shash: shashb {
            compatible = "zmk,behavior-mod-morph";
            label = "HASH_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp HASH>, <&kp GRAVE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ahash: ahashb {
            compatible = "zmk,behavior-mod-morph";
            label = "HASH_ALT"; 
            #binding-cells = <0>;
            bindings = <&kp HASH>, <&kp GRAVE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ghash: ghashb {
            compatible = "zmk,behavior-mod-morph";
            label = "HASH";
            #binding-cells = <0>;
            bindings = <&shashb>, <&ahashb>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };


	// & % AMPS N1
        samps: sampsb {
            compatible = "zmk,behavior-mod-morph";
            label = "AMPS_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp AMPS>, <&kp N1>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        aamps: aampsb {
            compatible = "zmk,behavior-mod-morph";
            label = "AMPS_ALT"; 
            #binding-cells = <0>;
            bindings = <&kp AMPS>, <&kp N1>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        gamps: gampsb {
            compatible = "zmk,behavior-mod-morph";
            label = "AMPS";
            #binding-cells = <0>;
            bindings = <&sampsb>, <&aampsb>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };


	// [ 2 LBKT N2
        slbkt: slbktb {
            compatible = "zmk,behavior-mod-morph";
            label = "LBKT_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp LBKT>, <&kp N2>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        albkt: albktb {
            compatible = "zmk,behavior-mod-morph";
            label = "LBKT_ALT"; 
            #binding-cells = <0>;
            bindings = <&kp LBKT>, <&kp N2>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        glbkt: glbktb {
            compatible = "zmk,behavior-mod-morph";
            label = "LBKT";
            #binding-cells = <0>;
            bindings = <&slbktb>, <&albktb>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };


	// { 3 LBRC N3
        slbrc: slbrcb {
            compatible = "zmk,behavior-mod-morph";
            label = "LBRC_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp LBRC>, <&kp N3>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        albrc: albrcb {
            compatible = "zmk,behavior-mod-morph";
            label = "LBRC_ALT"; 
            #binding-cells = <0>;
            bindings = <&kp LBRC>, <&kp N3>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        glbrc: glbrcb {
            compatible = "zmk,behavior-mod-morph";
            label = "LBRC";
            #binding-cells = <0>;
            bindings = <&slbrcb>, <&albrcb>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };


        // } 4 RBRC N4
        srbrc: srbrcb {
            compatible = "zmk,behavior-mod-morph";
            label = "RBRC_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp RBRC>, <&kp N4>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        arbrc: arbrcb {
            compatible = "zmk,behavior-mod-morph";
            label = "RBRC_ALT"; 
            #binding-cells = <0>;
            bindings = <&kp RBRC>, <&kp N4>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        grbrc: grbrcb {
            compatible = "zmk,behavior-mod-morph";
            label = "RBRC";
            #binding-cells = <0>;
            bindings = <&srbrcb>, <&arbrcb>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };


        // ( 5 LPAR N5
        slpar: slparb {
            compatible = "zmk,behavior-mod-morph";
            label = "LPAR_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp LPAR>, <&kp N5>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        alpar: alparb {
            compatible = "zmk,behavior-mod-morph";
            label = "LPAR_ALT"; 
            #binding-cells = <0>;
            bindings = <&kp LPAR>, <&kp N5>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        glpar: glparb {
            compatible = "zmk,behavior-mod-morph";
            label = "LPAR";
            #binding-cells = <0>;
            bindings = <&slparb>, <&alparb>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };


        // = 6 EQUAL N6
        sequal: sequalb {
            compatible = "zmk,behavior-mod-morph";
            label = "EQUAL_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp EQUAL>, <&kp N6>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        aequal: aequalb {
            compatible = "zmk,behavior-mod-morph";
            label = "EQUAL_ALT"; 
            #binding-cells = <0>;
            bindings = <&kp EQUAL>, <&kp N6>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        gequal: gequalb {
            compatible = "zmk,behavior-mod-morph";
            label = "EQUAL";
            #binding-cells = <0>;
            bindings = <&sequalb>, <&aequalb>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };


        // * 7 STAR N7
        sstar: sstarb {
            compatible = "zmk,behavior-mod-morph";
            label = "STAR_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp STAR>, <&kp N7>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        astar: astarb {
            compatible = "zmk,behavior-mod-morph";
            label = "STAR_ALT"; 
            #binding-cells = <0>;
            bindings = <&kp STAR>, <&kp N7>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        gstar: gstarb {
            compatible = "zmk,behavior-mod-morph";
            label = "STAR";
            #binding-cells = <0>;
            bindings = <&sstarb>, <&astarb>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        // ) 8 RPAR N8
        srpar: srparb {
            compatible = "zmk,behavior-mod-morph";
            label = "RPAR_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp RPAR>, <&kp N8>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        arpar: arparb {
            compatible = "zmk,behavior-mod-morph";
            label = "RPAR_ALT"; 
            #binding-cells = <0>;
            bindings = <&kp RPAR>, <&kp N8>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        grpar: grparb {
            compatible = "zmk,behavior-mod-morph";
            label = "RPAR";
            #binding-cells = <0>;
            bindings = <&srparb>, <&arparb>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };


        // + 9 PLUS N9
        splus: splusb {
            compatible = "zmk,behavior-mod-morph";
            label = "PLUS_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp PLUS>, <&kp N9>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        aplus: aplusb {
            compatible = "zmk,behavior-mod-morph";
            label = "PLUS_ALT"; 
            #binding-cells = <0>;
            bindings = <&kp PLUS>, <&kp N9>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        gplus: gplusb {
            compatible = "zmk,behavior-mod-morph";
            label = "PLUS";
            #binding-cells = <0>;
            bindings = <&splusb>, <&aplusb>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };


        // ] 0 RBKT N0
        srbkt: srbktb {
            compatible = "zmk,behavior-mod-morph";
            label = "RBKT_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp RBKT>, <&kp N0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        arbkt: arbktb {
            compatible = "zmk,behavior-mod-morph";
            label = "RBKT_ALT"; 
            #binding-cells = <0>;
            bindings = <&kp RBKT>, <&kp N0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        grbkt: grbktb {
            compatible = "zmk,behavior-mod-morph";
            label = "RBKT";
            #binding-cells = <0>;
            bindings = <&srbktb>, <&arbktb>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };


        // ! % EXCL PRCNT
        sexcl: sexclb {
            compatible = "zmk,behavior-mod-morph";
            label = "EXCL_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp EXCL>, <&kp PRCNT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        aexcl: aexclb {
            compatible = "zmk,behavior-mod-morph";
            label = "EXCL_ALT"; 
            #binding-cells = <0>;
            bindings = <&kp EXCL>, <&kp PRCNT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        gexcl: gexclb {
            compatible = "zmk,behavior-mod-morph";
            label = "EXCL";
            #binding-cells = <0>;
            bindings = <&sexclb>, <&aexclb>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };


        // ; : SEMI COLON á
        ssemi: ssemib {
            compatible = "zmk,behavior-mod-morph";
            label = "SEMI_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp SEMI>, <&kp COLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        asemi: asemib {
            compatible = "zmk,behavior-mod-morph";
            label = "SEMI_ALT"; 
            #binding-cells = <0>;
            bindings = <&a_accute>, <&a_accute_caps>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        gsemi: gsemib {
            compatible = "zmk,behavior-mod-morph";
            label = "SEMI";
            #binding-cells = <0>;
            bindings = <&ssemib>, <&asemib>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };


        // , < COMMA LT ó
        scomma: scommab {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp LT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        acomma: acommab {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_ALT"; 
            #binding-cells = <0>;
            bindings = <&o_accute>, <&o_accute_caps>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        gcomma: gcommab {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA";
            #binding-cells = <0>;
            bindings = <&scommab>, <&acommab>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };


        // . > DOT GT é
        sdot: sdotb {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp GT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        adot: adotb {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_ALT"; 
            #binding-cells = <0>;
            bindings = <&e_accute>, <&e_accute_caps>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        gdot: gdotb {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT";
            #binding-cells = <0>;
            bindings = <&sdotb>, <&adotb>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };


        // p ú
        sp: spb {
            compatible = "zmk,behavior-mod-morph";
            label = "P_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp P>, <&kp LS(P)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ap: apb {
            compatible = "zmk,behavior-mod-morph";
            label = "P_ALT"; 
            #binding-cells = <0>;
            bindings = <&u_accute>, <&u_accute_caps>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        gp: gpb {
            compatible = "zmk,behavior-mod-morph";
            label = "P";
            #binding-cells = <0>;
            bindings = <&spb>, <&apb>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };


        // y í
        sy: syb {
            compatible = "zmk,behavior-mod-morph";
            label = "Y_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp Y>, <&kp LS(Y)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ay: ayb {
            compatible = "zmk,behavior-mod-morph";
            label = "Y_ALT"; 
            #binding-cells = <0>;
            bindings = <&i_accute>, <&i_accute_caps>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        gy: gyb {
            compatible = "zmk,behavior-mod-morph";
            label = "Y";
            #binding-cells = <0>;
            bindings = <&syb>, <&ayb>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };


        // f
        sf: sfb {
            compatible = "zmk,behavior-mod-morph";
            label = "F_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp F>, <&kp LS(F)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        af: afb {
            compatible = "zmk,behavior-mod-morph";
            label = "F_ALT"; 
            #binding-cells = <0>;
            bindings = <&kp F>, <&kp LS(F)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        gf: gfb {
            compatible = "zmk,behavior-mod-morph";
            label = "F";
            #binding-cells = <0>;
            bindings = <&sfb>, <&afb>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };


        // g
        sg: sgb {
            compatible = "zmk,behavior-mod-morph";
            label = "G_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp G>, <&kp LS(G)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ag: agb {
            compatible = "zmk,behavior-mod-morph";
            label = "G_ALT"; 
            #binding-cells = <0>;
            bindings = <&kp G>, <&kp LS(G)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        gg: ggb {
            compatible = "zmk,behavior-mod-morph";
            label = "G";
            #binding-cells = <0>;
            bindings = <&sgb>, <&agb>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };


        // c ç
        sc: scb {
            compatible = "zmk,behavior-mod-morph";
            label = "C_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp C>, <&kp LS(C)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ac: acb {
            compatible = "zmk,behavior-mod-morph";
            label = "C_ALT"; 
            #binding-cells = <0>;
            bindings = <&c_cedil>, <&c_cedil_caps>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        gc: gcb {
            compatible = "zmk,behavior-mod-morph";
            label = "C";
            #binding-cells = <0>;
            bindings = <&scb>, <&acb>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };


        // l
        sl: slb {
            compatible = "zmk,behavior-mod-morph";
            label = "L_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp L>, <&kp LS(L)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        al: alb {
            compatible = "zmk,behavior-mod-morph";
            label = "L_ALT"; 
            #binding-cells = <0>;
            bindings = <&kp L>, <&kp LS(L)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        gl: glb {
            compatible = "zmk,behavior-mod-morph";
            label = "L";
            #binding-cells = <0>;
            bindings = <&slb>, <&alb>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };


        // \ | bslh pipe
        sbslh: sbslhb {
            compatible = "zmk,behavior-mod-morph";
            label = "BSLH_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp BSLH>, <&kp PIPE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        abslh: abslhb {
            compatible = "zmk,behavior-mod-morph";
            label = "BSLH_ALT"; 
            #binding-cells = <0>;
            bindings = <&kp BSLH>, <&kp PIPE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        gbslh: gbslhb {
            compatible = "zmk,behavior-mod-morph";
            label = "BSLH";
            #binding-cells = <0>;
            bindings = <&sbslhb>, <&abslhb>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };


        // a â
        sa: sab {
            compatible = "zmk,behavior-mod-morph";
            label = "A_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp A>, <&kp LS(A)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        aa: aab {
            compatible = "zmk,behavior-mod-morph";
            label = "A_ALT"; 
            #binding-cells = <0>;
            bindings = <&a_circ>, <&a_circ_caps>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ga: gab {
            compatible = "zmk,behavior-mod-morph";
            label = "A";
            #binding-cells = <0>;
            bindings = <&sab>, <&aab>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };


        // o ô
        so: sob {
            compatible = "zmk,behavior-mod-morph";
            label = "O_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp O>, <&kp LS(O)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ao: aob {
            compatible = "zmk,behavior-mod-morph";
            label = "O_ALT"; 
            #binding-cells = <0>;
            bindings = <&o_circ>, <&o_circ_caps>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        go: gob {
            compatible = "zmk,behavior-mod-morph";
            label = "O";
            #binding-cells = <0>;
            bindings = <&sob>, <&aob>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };


        // e ê
        se: seb {
            compatible = "zmk,behavior-mod-morph";
            label = "E_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp E>, <&kp LS(E)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ae: aeb {
            compatible = "zmk,behavior-mod-morph";
            label = "E_ALT"; 
            #binding-cells = <0>;
            bindings = <&e_circ>, <&e_circ_caps>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ge: geb {
            compatible = "zmk,behavior-mod-morph";
            label = "E";
            #binding-cells = <0>;
            bindings = <&seb>, <&aeb>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };


        // u û
        su: sub {
            compatible = "zmk,behavior-mod-morph";
            label = "U_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp U>, <&kp LS(U)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        au: aub {
            compatible = "zmk,behavior-mod-morph";
            label = "U_ALT"; 
            #binding-cells = <0>;
            bindings = <&u_circ>, <&u_circ_caps>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        gu: gub {
            compatible = "zmk,behavior-mod-morph";
            label = "U";
            #binding-cells = <0>;
            bindings = <&sub>, <&aub>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };


        // i î 
        si: sib {
            compatible = "zmk,behavior-mod-morph";
            label = "I_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp I>, <&kp LS(I)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ai: aib {
            compatible = "zmk,behavior-mod-morph";
            label = "I_ALT"; 
            #binding-cells = <0>;
            bindings = <&i_circ>, <&i_circ_caps>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        gi: gib {
            compatible = "zmk,behavior-mod-morph";
            label = "I";
            #binding-cells = <0>;
            bindings = <&sib>, <&aib>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };


        // d ï
        sd: sdb {
            compatible = "zmk,behavior-mod-morph";
            label = "D_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp D>, <&kp LS(D)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ad: adb {
            compatible = "zmk,behavior-mod-morph";
            label = "D_ALT"; 
            #binding-cells = <0>;
            bindings = <&i_trema>, <&i_trema_caps>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        gd: gdb {
            compatible = "zmk,behavior-mod-morph";
            label = "D";
            #binding-cells = <0>;
            bindings = <&sdb>, <&adb>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };


        // h ü
        sh: shb {
            compatible = "zmk,behavior-mod-morph";
            label = "H_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp H>, <&kp LS(H)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ah: ahb {
            compatible = "zmk,behavior-mod-morph";
            label = "H_ALT"; 
            #binding-cells = <0>;
            bindings = <&u_trema>, <&u_trema_caps>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        gh: ghb {
            compatible = "zmk,behavior-mod-morph";
            label = "H";
            #binding-cells = <0>;
            bindings = <&shb>, <&ahb>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };


        // t ë
        st: stb {
            compatible = "zmk,behavior-mod-morph";
            label = "T_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp T>, <&kp LS(T)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        at: atb {
            compatible = "zmk,behavior-mod-morph";
            label = "T_ALT"; 
            #binding-cells = <0>;
            bindings = <&e_trema>, <&e_trema_caps>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        gt: gtb {
            compatible = "zmk,behavior-mod-morph";
            label = "T";
            #binding-cells = <0>;
            bindings = <&stb>, <&atb>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };


        // n ö
        sn: snb {
            compatible = "zmk,behavior-mod-morph";
            label = "N_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp N>, <&kp LS(N)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        an: anb {
            compatible = "zmk,behavior-mod-morph";
            label = "N_ALT"; 
            #binding-cells = <0>;
            bindings = <&o_trema>, <&o_trema_caps>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        gn: gnb {
            compatible = "zmk,behavior-mod-morph";
            label = "N";
            #binding-cells = <0>;
            bindings = <&snb>, <&anb>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };


        // s ä
        ss: ssb {
            compatible = "zmk,behavior-mod-morph";
            label = "S_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp S>, <&kp LS(S)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        as: asb {
            compatible = "zmk,behavior-mod-morph";
            label = "S_ALT"; 
            #binding-cells = <0>;
            bindings = <&a_trema>, <&a_trema_caps>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        gs: gsb {
            compatible = "zmk,behavior-mod-morph";
            label = "S";
            #binding-cells = <0>;
            bindings = <&ssb>, <&asb>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };


        // - _ MINUS UNDER
        sminus: sminusb {
            compatible = "zmk,behavior-mod-morph";
            label = "MINUS_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp UNDER>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        aminus: aminusb {
            compatible = "zmk,behavior-mod-morph";
            label = "MINUS_ALT"; 
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp UNDER>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        gminus: gminusb {
            compatible = "zmk,behavior-mod-morph";
            label = "MINUS";
            #binding-cells = <0>;
            bindings = <&sminusb>, <&aminusb>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };


        // $ ~ DLLR TILDE
        sdllr: sdllrb {
            compatible = "zmk,behavior-mod-morph";
            label = "DLLR_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp DLLR>, <&kp TILDE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        adllr: adllrb {
            compatible = "zmk,behavior-mod-morph";
            label = "DLLR_ALT"; 
            #binding-cells = <0>;
            bindings = <&kp DLLR>, <&kp TILDE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        gdllr: gdllrb {
            compatible = "zmk,behavior-mod-morph";
            label = "DLLR";
            #binding-cells = <0>;
            bindings = <&sdllrb>, <&adllrb>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };


        // ' " SQT DQT à
        ssqt: ssqtb {
            compatible = "zmk,behavior-mod-morph";
            label = "SQT_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp SQT>, <&kp DQT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        asqt: asqtb {
            compatible = "zmk,behavior-mod-morph";
            label = "SQT_ALT"; 
            #binding-cells = <0>;
            bindings = <&a_grave>, <&a_grave_caps>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        gsqt: gsqtb {
            compatible = "zmk,behavior-mod-morph";
            label = "SQT";
            #binding-cells = <0>;
            bindings = <&ssqtb>, <&asqtb>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };


        // q ò
        sq: sqb {
            compatible = "zmk,behavior-mod-morph";
            label = "Q_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp Q>, <&kp LS(Q)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        aq: aqb {
            compatible = "zmk,behavior-mod-morph";
            label = "Q_ALT"; 
            #binding-cells = <0>;
            bindings = <&o_grave>, <&o_grave_caps>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        gq: gqb {
            compatible = "zmk,behavior-mod-morph";
            label = "Q";
            #binding-cells = <0>;
            bindings = <&sqb>, <&aqb>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };


        // j è
        sj: sjb {
            compatible = "zmk,behavior-mod-morph";
            label = "J_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp J>, <&kp LS(J)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        aj: ajb {
            compatible = "zmk,behavior-mod-morph";
            label = "J_ALT"; 
            #binding-cells = <0>;
            bindings = <&e_grave>, <&e_grave_caps>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        gj: gjb {
            compatible = "zmk,behavior-mod-morph";
            label = "J";
            #binding-cells = <0>;
            bindings = <&sjb>, <&ajb>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };


        // k ù
        sk: skb {
            compatible = "zmk,behavior-mod-morph";
            label = "K_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp K>, <&kp LS(K)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ak: akb {
            compatible = "zmk,behavior-mod-morph";
            label = "K_ALT"; 
            #binding-cells = <0>;
            bindings = <&u_grave>, <&u_grave_caps>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        gk: gkb {
            compatible = "zmk,behavior-mod-morph";
            label = "K";
            #binding-cells = <0>;
            bindings = <&skb>, <&akb>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };


        // x ì
        sx: sxb {
            compatible = "zmk,behavior-mod-morph";
            label = "X_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp X>, <&kp LS(X)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ax: axb {
            compatible = "zmk,behavior-mod-morph";
            label = "X_ALT"; 
            #binding-cells = <0>;
            bindings = <&i_grave>, <&i_grave_caps>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        gx: gxb {
            compatible = "zmk,behavior-mod-morph";
            label = "X";
            #binding-cells = <0>;
            bindings = <&sxb>, <&axb>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };


        // b
        sb: sbb {
            compatible = "zmk,behavior-mod-morph";
            label = "B_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp B>, <&kp LS(B)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ab: abb {
            compatible = "zmk,behavior-mod-morph";
            label = "B_ALT"; 
            #binding-cells = <0>;
            bindings = <&kp B>, <&kp B>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        gb: gbb {
            compatible = "zmk,behavior-mod-morph";
            label = "B";
            #binding-cells = <0>;
            bindings = <&sbb>, <&abb>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };


        // m
        sm: smb {
            compatible = "zmk,behavior-mod-morph";
            label = "M_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp M>, <&kp LS(M)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        am: amb {
            compatible = "zmk,behavior-mod-morph";
            label = "M_ALT"; 
            #binding-cells = <0>;
            bindings = <&kp M>, <&kp M>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        gm: gmb {
            compatible = "zmk,behavior-mod-morph";
            label = "M";
            #binding-cells = <0>;
            bindings = <&smb>, <&amb>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };


        // w
        sw: swb {
            compatible = "zmk,behavior-mod-morph";
            label = "W_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp W>, <&kp LS(W)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        aw: awb {
            compatible = "zmk,behavior-mod-morph";
            label = "W_ALT"; 
            #binding-cells = <0>;
            bindings = <&kp W>, <&kp W>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        gw: gwb {
            compatible = "zmk,behavior-mod-morph";
            label = "W";
            #binding-cells = <0>;
            bindings = <&swb>, <&awb>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };


        // v
        sv: svb {
            compatible = "zmk,behavior-mod-morph";
            label = "V_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp V>, <&kp LS(V)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        av: avb {
            compatible = "zmk,behavior-mod-morph";
            label = "V_ALT"; 
            #binding-cells = <0>;
            bindings = <&kp V>, <&kp V>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        gv: gvb {
            compatible = "zmk,behavior-mod-morph";
            label = "V";
            #binding-cells = <0>;
            bindings = <&svb>, <&avb>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        // z
        sz: szb {
            compatible = "zmk,behavior-mod-morph";
            label = "Z_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp Z>, <&kp LS(Z)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        az: azb {
            compatible = "zmk,behavior-mod-morph";
            label = "Z_ALT"; 
            #binding-cells = <0>;
            bindings = <&kp Z>, <&kp Z>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        gz: gzb {
            compatible = "zmk,behavior-mod-morph";
            label = "Z";
            #binding-cells = <0>;
            bindings = <&szb>, <&azb>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };


        // / ? FSLH QMARK
        sfslh: sfslhb {
            compatible = "zmk,behavior-mod-morph";
            label = "FSLH_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp FSLH>, <&kp QMARK>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        afslh: afslhb {
            compatible = "zmk,behavior-mod-morph";
            label = "FSLH_ALT"; 
            #binding-cells = <0>;
            bindings = <&kp FSLH>, <&kp QMARK>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        gfslh: gfslhb {
            compatible = "zmk,behavior-mod-morph";
            label = "FSLH";
            #binding-cells = <0>;
            bindings = <&sfslhb>, <&afslhb>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };


        // @ ^ AT CARET
        sat: satb {
            compatible = "zmk,behavior-mod-morph";
            label = "AT_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp AT>, <&kp CARET>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        aat: aatb {
            compatible = "zmk,behavior-mod-morph";
            label = "AT_ALT"; 
            #binding-cells = <0>;
            bindings = <&kp AT>, <&kp CARET>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        gat: gatb {
            compatible = "zmk,behavior-mod-morph";
            label = "AT";
            #binding-cells = <0>;
            bindings = <&satb>, <&aatb>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };

        a_accute: a_accute {
            label = "A_ACCUTE";
            compatible = "zmk,behavior-macro";
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
            = <&macro_press   &kp LALT>
            , <&macro_tap     &kp KP_N1 &kp KP_N6 &kp KP_N0>
            , <&macro_release &kp LALT>;
        };

        a_accute_caps: a_accute_caps {
            label = "A_ACCUTE_CAPS";
            compatible = "zmk,behavior-macro";
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
            = <&macro_press   &kp LALT>
            , <&macro_tap     &kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N3>
            , <&macro_release &kp LALT>;
        };

        o_accute: o_accute {
            label = "O_ACCUTE";
            compatible = "zmk,behavior-macro";
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
            = <&macro_press   &kp LALT>
            , <&macro_tap     &kp KP_N1 &kp KP_N6 &kp KP_N2>
            , <&macro_release &kp LALT>;
        };

        o_accute_caps: o_accute_caps {
            label = "O_ACCUTE_CAPS";
            compatible = "zmk,behavior-macro";
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
            = <&macro_press   &kp LALT>
            , <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N1>
            , <&macro_release &kp LALT>;
        };

        e_accute: e_accute {
            label = "E_ACCUTE";
            compatible = "zmk,behavior-macro";
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
            = <&macro_press   &kp LALT>
            , <&macro_tap     &kp KP_N1 &kp KP_N3 &kp KP_N0>
            , <&macro_release &kp LALT>;
        };

        e_accute_caps: e_accute_caps {
            label = "E_ACCUTE_CAPS";
            compatible = "zmk,behavior-macro";
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
            = <&macro_press   &kp LALT>
            , <&macro_tap     &kp KP_N1 &kp KP_N4 &kp KP_N4>
            , <&macro_release &kp LALT>;
        };

        u_accute: u_accute {
            label = "U_ACCUTE";
            compatible = "zmk,behavior-macro";
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
            = <&macro_press   &kp LALT>
            , <&macro_tap     &kp KP_N1 &kp KP_N6 &kp KP_N3>
            , <&macro_release &kp LALT>;
        };

        u_accute_caps: u_accute_caps {
            label = "U_ACCUTE_CAPS";
            compatible = "zmk,behavior-macro";
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
            = <&macro_press   &kp LALT>
            , <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N7>
            , <&macro_release &kp LALT>;
        };

        i_accute: i_accute {
            label = "I_ACCUTE";
            compatible = "zmk,behavior-macro";
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
            = <&macro_press   &kp LALT>
            , <&macro_tap     &kp KP_N1 &kp KP_N6 &kp KP_N1>
            , <&macro_release &kp LALT>;
        };

        i_accute_caps: i_accute_caps {
            label = "I_ACCUTE_CAPS";
            compatible = "zmk,behavior-macro";
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
            = <&macro_press   &kp LALT>
            , <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N5>
            , <&macro_release &kp LALT>;
        };


        a_grave: a_grave {
            label = "A_ACCUTE";
            compatible = "zmk,behavior-macro";
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
            = <&macro_press   &kp LALT>
            , <&macro_tap     &kp KP_N1 &kp KP_N3 &kp KP_N3>
            , <&macro_release &kp LALT>;
        };

        a_grave_caps: a_grave_caps {
            label = "A_ACCUTE_CAPS";
            compatible = "zmk,behavior-macro";
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
            = <&macro_press   &kp LALT>
            , <&macro_tap     &kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N2>
            , <&macro_release &kp LALT>;
        };

        o_grave: o_grave {
            label = "O_ACCUTE";
            compatible = "zmk,behavior-macro";
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
            = <&macro_press   &kp LALT>
            , <&macro_tap     &kp KP_N1 &kp KP_N4 &kp KP_N9>
            , <&macro_release &kp LALT>;
        };

        o_grave_caps: o_grave_caps {
            label = "O_ACCUTE_CAPS";
            compatible = "zmk,behavior-macro";
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
            = <&macro_press   &kp LALT>
            , <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N0>
            , <&macro_release &kp LALT>;
        };

        e_grave: e_grave {
            label = "E_ACCUTE";
            compatible = "zmk,behavior-macro";
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
            = <&macro_press   &kp LALT>
            , <&macro_tap     &kp KP_N1 &kp KP_N3 &kp KP_N8>
            , <&macro_release &kp LALT>;
        };

        e_grave_caps: e_grave_caps {
            label = "E_ACCUTE_CAPS";
            compatible = "zmk,behavior-macro";
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
            = <&macro_press   &kp LALT>
            , <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N0 KP_N0>
            , <&macro_release &kp LALT>;
        };

        u_grave: u_grave {
            label = "U_ACCUTE";
            compatible = "zmk,behavior-macro";
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
            = <&macro_press   &kp LALT>
            , <&macro_tap     &kp KP_N1 &kp KP_N5 &kp KP_N1>
            , <&macro_release &kp LALT>;
        };

        u_grave_caps: u_grave_caps {
            label = "U_ACCUTE_CAPS";
            compatible = "zmk,behavior-macro";
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
            = <&macro_press   &kp LALT>
            , <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N7>
            , <&macro_release &kp LALT>;
        };

        i_grave: i_grave {
            label = "I_ACCUTE";
            compatible = "zmk,behavior-macro";
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
            = <&macro_press   &kp LALT>
            , <&macro_tap     &kp KP_N1 &kp KP_N4 &kp KP_N1>
            , <&macro_release &kp LALT>;
        };

        i_grave_caps: i_grave_caps {
            label = "I_ACCUTE_CAPS";
            compatible = "zmk,behavior-macro";
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
            = <&macro_press   &kp LALT>
            , <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N4>
            , <&macro_release &kp LALT>;
        };


        a_circ: a_circ {
            label = "A_ACCUTE";
            compatible = "zmk,behavior-macro";
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
            = <&macro_press   &kp LALT>
            , <&macro_tap     &kp KP_N1 &kp KP_N3 &kp KP_N1>
            , <&macro_release &kp LALT>;
        };

        a_circ_caps: a_circ_caps {
            label = "A_ACCUTE_CAPS";
            compatible = "zmk,behavior-macro";
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
            = <&macro_press   &kp LALT>
            , <&macro_tap     &kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N4>
            , <&macro_release &kp LALT>;
        };

        o_circ: o_circ {
            label = "O_ACCUTE";
            compatible = "zmk,behavior-macro";
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
            = <&macro_press   &kp LALT>
            , <&macro_tap     &kp KP_N1 &kp KP_N4 &kp KP_N7>
            , <&macro_release &kp LALT>;
        };

        o_circ_caps: o_circ_caps {
            label = "O_ACCUTE_CAPS";
            compatible = "zmk,behavior-macro";
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
            = <&macro_press   &kp LALT>
            , <&macro_tap     &kp KP_N2 &kp KP_N1 &kp KP_N2>
            , <&macro_release &kp LALT>;
        };

        e_circ: e_circ {
            label = "E_ACCUTE";
            compatible = "zmk,behavior-macro";
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
            = <&macro_press   &kp LALT>
            , <&macro_tap     &kp KP_N1 &kp KP_N3 &kp KP_N6>
            , <&macro_release &kp LALT>;
        };

        e_circ_caps: e_circ_caps {
            label = "E_ACCUTE_CAPS";
            compatible = "zmk,behavior-macro";
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
            = <&macro_press   &kp LALT>
            , <&macro_tap     &kp KP_N2 &kp KP_N0 &kp KP_N2>
            , <&macro_release &kp LALT>;
        };

        u_circ: u_circ {
            label = "U_ACCUTE";
            compatible = "zmk,behavior-macro";
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
            = <&macro_press   &kp LALT>
            , <&macro_tap     &kp KP_N1 &kp KP_N5 &kp KP_N0>
            , <&macro_release &kp LALT>;
        };

        u_circ_caps: u_circ_caps {
            label = "U_ACCUTE_CAPS";
            compatible = "zmk,behavior-macro";
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
            = <&macro_press   &kp LALT>
            , <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N9>
            , <&macro_release &kp LALT>;
        };

        i_circ: i_circ {
            label = "I_ACCUTE";
            compatible = "zmk,behavior-macro";
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
            = <&macro_press   &kp LALT>
            , <&macro_tap     &kp KP_N1 &kp KP_N4 &kp KP_N0>
            , <&macro_release &kp LALT>;
        };

        i_circ_caps: i_circ_caps {
            label = "I_ACCUTE_CAPS";
            compatible = "zmk,behavior-macro";
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
            = <&macro_press   &kp LALT>
            , <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N6>
            , <&macro_release &kp LALT>;
        };


        a_trema: a_trema {
            label = "A_ACCUTE";
            compatible = "zmk,behavior-macro";
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
            = <&macro_press   &kp LALT>
            , <&macro_tap     &kp KP_N1 &kp KP_N3 &kp KP_N2>
            , <&macro_release &kp LALT>;
        };

        a_trema_caps: a_trema_caps {
            label = "A_ACCUTE_CAPS";
            compatible = "zmk,behavior-macro";
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
            = <&macro_press   &kp LALT>
            , <&macro_tap     &kp KP_N0 &kp KP_N1 &kp KP_N4 &kp KP_N2>
            , <&macro_release &kp LALT>;
        };

        o_trema: o_trema {
            label = "O_ACCUTE";
            compatible = "zmk,behavior-macro";
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
            = <&macro_press   &kp LALT>
            , <&macro_tap     &kp KP_N1 &kp KP_N4 &kp KP_N8>
            , <&macro_release &kp LALT>;
        };

        o_trema_caps: o_trema_caps {
            label = "O_ACCUTE_CAPS";
            compatible = "zmk,behavior-macro";
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
            = <&macro_press   &kp LALT>
            , <&macro_tap     &kp KP_N1 &kp KP_N5 &kp KP_N3>
            , <&macro_release &kp LALT>;
        };

        e_trema: e_trema {
            label = "E_ACCUTE";
            compatible = "zmk,behavior-macro";
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
            = <&macro_press   &kp LALT>
            , <&macro_tap     &kp KP_N1 &kp KP_N3 &kp KP_N7>
            , <&macro_release &kp LALT>;
        };

        e_trema_caps: e_trema_caps {
            label = "E_ACCUTE_CAPS";
            compatible = "zmk,behavior-macro";
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
            = <&macro_press   &kp LALT>
            , <&macro_tap     &kp KP_N2 &kp KP_N0 &kp KP_N3>
            , <&macro_release &kp LALT>;
        };

        u_trema: u_trema {
            label = "U_ACCUTE";
            compatible = "zmk,behavior-macro";
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
            = <&macro_press   &kp LALT>
            , <&macro_tap     &kp KP_N1 &kp KP_N2 &kp KP_N9>
            , <&macro_release &kp LALT>;
        };

        u_trema_caps: u_trema_caps {
            label = "U_ACCUTE_CAPS";
            compatible = "zmk,behavior-macro";
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
            = <&macro_press   &kp LALT>
            , <&macro_tap     &kp KP_N1 &kp KP_N5 &kp KP_N4>
            , <&macro_release &kp LALT>;
        };

        i_trema: i_trema {
            label = "I_ACCUTE";
            compatible = "zmk,behavior-macro";
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
            = <&macro_press   &kp LALT>
            , <&macro_tap     &kp KP_N1 &kp KP_N3 &kp KP_N9>
            , <&macro_release &kp LALT>;
        };

        i_trema_caps: i_trema_caps {
            label = "I_ACCUTE_CAPS";
            compatible = "zmk,behavior-macro";
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
            = <&macro_press   &kp LALT>
            , <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N7>
            , <&macro_release &kp LALT>;
        };

        c_cedil: c_cedil {
            label = "C_CEDIL";
            compatible = "zmk,behavior-macro";
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
            = <&macro_press   &kp LALT>
            , <&macro_tap     &kp KP_N1 &kp KP_N3 &kp KP_N5>
            , <&macro_release &kp LALT>;
        };

        c_cedil_caps: c_cedil_caps {
            label = "C_CEDIL_CAPS";
            compatible = "zmk,behavior-macro";
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
            = <&macro_press   &kp LALT>
            , <&macro_tap     &kp KP_N1 &kp KP_N2 &kp KP_N8>
            , <&macro_release &kp LALT>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
            &kp F1         &kp F2   &kp F3      &kp F4      &kp F5                                                                                         &kp F6  &kp F7      &kp F8      &kp F9      &kp F10
            &ghash         &gamps   &glbkt      &glbrc      &grbrc      &glpar                                                                     &gequal &gstar  &glpar      &gplus      &grbkt      &gexcl
            &kp TAB        &gsemi   &gcomma     &gdot       &gp         &gy                                                                        &gf     &gg     &gc         &gr         &gl         &gbslh
            &kp ESC        &ga      &go         &ge         &gu         &gi                                                                        &gd     &gh     &gt         &gn         &gs         &gminus
            &gdllr         &gsqt    &gq         &gj         &gk         &gx     &kp LSHFT   &kp LCTRL   &layer_td  &kp LGUI  &kp RCTRL &kp RSHFT   &gb     &gm     &gw         &gv         &gz         &kp PG_UP
            &magic MAGIC 0 &kp HOME &kp END     &kp LEFT    &kp RIGHT           &kp BSPC    &kp DEL     &kp LALT   &kp RALT  &kp RET   &kp SPACE           &kp UP  &kp DOWN    &gfslh      &gat        &kp PG_DN
            >;
        };

        lower_layer {
            bindings = <
            &kp C_BRI_DN      &kp C_BRI_UP        &kp C_PREV      &kp C_NEXT      &kp C_PP                                                                                                           &kp C_MUTE   &kp C_VOL_DN &kp C_VOL_UP  &none           &kp PAUSE_BREAK
            &trans            &none               &none           &none           &none           &kp HOME                                                                              &kp LPAR     &kp KP_NUM   &kp KP_EQUAL &kp KP_DIVIDE &kp KP_MULTIPLY &kp PSCRN
            &trans            &none               &none           &kp UP          &none           &kp END                                                                               &kp RPAR     &kp KP_N7    &kp KP_N8    &kp KP_N9     &kp KP_MINUS    &kp SLCK
            &trans            &none               &kp LEFT        &kp DOWN        &kp RIGHT       &kp PG_UP                                                                             &kp PRCNT    &kp KP_N4    &kp KP_N5    &kp KP_N6     &kp KP_PLUS     &none
            &trans            &kp K_CMENU         &none           &kp F11         &kp F12         &kp PG_DN       &trans      &trans      &to DEFAULT &trans      &trans      &trans    &kp COMMA    &kp KP_N1    &kp KP_N2    &kp KP_N3     &kp KP_ENTER    &trans
            &trans            &kp CAPS            &kp INS         &kp F11         &kp F12                         &trans      &trans      &trans      &trans      &trans      &trans                 &kp KP_N0    &kp KP_N0    &kp KP_DOT    &kp KP_ENTER    &trans
            >;
        };

        magic_layer {
            bindings = <
            &bt BT_CLR        &none               &none           &none           &none                                                                                                           &none      &none      &none      &none      &bt BT_CLR_ALL
            &none             &none               &none           &none           &none           &none                                                                                &none      &none      &none      &none      &none      &none
            &none             &rgb_ug RGB_SPI     &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_BRI &rgb_ug RGB_TOG                                                                      &none      &none      &none      &none      &none      &none
            &bootloader       &rgb_ug RGB_SPD     &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_BRD &rgb_ug RGB_EFF                                                                      &none      &none      &none      &none      &none      &bootloader
            &sys_reset        &none               &none           &none           &none           &none           &bt_2     &bt_3     &none            &none     &none     &none       &none      &none      &none      &none      &none      &sys_reset
            &none             &none               &none           &none           &none                           &bt_0     &bt_1     &out OUT_USB     &none     &none     &none                  &none      &none      &none      &none      &to FACTORY_TEST
            >;
        };

        factory_test_layer {
            bindings = <
            &kp N0   &kp N6   &kp N2   &kp N8   &kp N4                                                                              &kp N4   &kp N8   &kp N2   &kp N6   &kp N0
            &kp N1   &kp N7   &kp N3   &kp N9   &kp N5   &kp N0                                                            &kp N0   &kp N5   &kp N9   &kp N3   &kp N7   &kp N1
            &kp N2   &kp N8   &kp N4   &kp N0   &kp N6   &kp N1                                                            &kp N1   &kp N6   &kp N0   &kp N4   &kp N8   &kp N2
            &kp N3   &kp N9   &kp N5   &kp N1   &kp N7   &kp N2                                                            &kp N2   &kp N7   &kp N1   &kp N5   &kp N9   &kp N3
            &kp N4   &kp N0   &kp N6   &kp N2   &kp N8   &kp N3   &kp N4   &kp N5   &kp N6      &kp N6   &kp N5   &kp N4   &kp N3   &kp N8   &kp N2   &kp N6   &kp N0   &kp N4
            &kp N5   &kp N1   &kp N7   &kp N3   &kp N9            &kp N7   &kp N8   &kp N9      &kp N9   &kp N8   &kp N7            &kp N9   &kp N3   &kp N7   &kp N1   &kp N5
            >;
        };
    };
};
